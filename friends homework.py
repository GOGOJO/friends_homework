# -*- coding: utf-8 -*-
"""Michelin coding bonus.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jBdSG2I5o5Jq2gyt7_1CTS480Sxn-voG

# Welcome to the Michelin bonus project !

This project is about exploiting a list of Michelin-rated restaurants (please note that this list is not exhaustive due to copyright issues).

The list of restaurants contains nested dictionaries, where each dictionary describes one restaurant.

This is the structure of a sample restaurant dictionary:

```
{
    'name': 'Garibaldi',         # Name of the restaurant
    'year': 2018,                # Awarded year
    'latitude': 1.296564,        # Its location (North-South)
    'longitude': 103.855,        # Its location (East-West)
    'city': 'Singapore',         # City name
    'region': 'Singapore',       # State or country
    'zipCode': 'n/a',            # Postal code
    'cuisine': 'Italian',        # Style
    'price': '$',                # Price range (from $ to $$$$$)
    'url': 'https://guide.michelin.com/sg/en/singapore-region/singapore/restaurant/garibaldi', 
                                 # URL of page in online Michelin guide
    'stars': 1                   # Stars awarded by Michelin (from 1 to 3)
}
```

# First run the initialization code for this project. 
Don't modify this code, **just run it once** before you try to run your own code.

The purpose of this code is to initialize the function `get_michelin_restaurants()` which will give you a list of 695 restaurants/dictionaries. Each dictionary contains information about one restaurant, according to the model given above.
"""

# INITIALIZATION CODE: DO NOT MODIFY, JUST RUN THIS ONCE!
# The restaurant database is a list of 695 dictionaries coming from this source:
# https://www.kaggle.com/datasets/jackywang529/michelin-restaurants

def get_michelin_restaurants():
    print('**ERROR: did you successfully run the initialization code at the top of this notebook ?**')
    return []


def print_restaurants(dict_list, key_list=None, max_items=-1):
    # Prints a tabulated list of dictionaries line by line, each value on its own column.
    # Argument key_list gives the keys for which the values shall be printed (default is all keys).
    # Argument max_items is the maximal number of items to print (default is unlimited).
    column_width = 20
    # Stop here if the list is empty:
    if len(dict_list) == 0:
        return
    # If no keys are specified, take those found in the first dictionary of the list:
    if key_list is None:
        key_list = dict_list[0].keys()
    # Print a header line consisting of uppercase keys:
    header = "\n"
    for key in key_list:
        header += str(key) + (' '*(column_width-len(str(key))))
    print(header.upper())
    # Print the values of the specified keys, nicely formatted by columns:
    for dico in dict_list:
        line = ''
        for key in key_list:
            value = str(dico[key])[:column_width-2]
            line += value + (' '*(column_width-len(value)))
        print(line)
        max_items -= 1
        if max_items == 0:
            break
    print()


if __name__ == '__main__':

    import requests
    import json

    source_url = 'https://hulaas.com/EHL/michelin.json'
    __all_restaurants = []
    response = requests.get(source_url)
    if response.status_code == 200:
        __all_restaurants = json.loads(response.text)
        print('Success: a call to function get_michelin_restaurants() will give you the list of ' + str(len(__all_restaurants)) + " restaurants to work on!")
        get_michelin_restaurants = lambda : __all_restaurants;
    else:
        print('** ERROR during initialization! **')
        print("Please check that your network is working and try again.")

"""# Your assignment:

**Your restaurant is established in Singapore and you want to know who your local competitors are.**

To this end, you must finish the implementation of function `filter_list(restaurants, cuisines, stars)` according to the following specifications.

From the given list of restaurants, return a new list, keeping only those satisfying all of these constraints:
- they must be located in the city of *Singapore*  (not to be confused with the *region* of Singapore)
- they must serve one of the given types of cuisine
- they must have at least the given number of stars

**Parameters:**
- restaurants: the list of restaurants we are starting from. It should not be modified.
- cuisines: the types of cuisine (a list of strings with at least one item)
- stars: minimal number of stars of the restaurants (a positive integer)

**Return value:** 
- a new list containing only restaurants matching all the given constraints.

**Please note:**
- You will find a sample call to this function in the last code cell of this notebook; it will enable you to understand what the function will receive as arguments.
- To check if your code works in all situations, we will test all kinds of variations of the function arguments. Don't write code which assumes that `filter_list` will always receive the same arguments!
"""

def check_cuisines(cuisine, cuisine_list):
    for x in cuisine_list:
        if x == cuisine:
            return True 
    return False

def filter_list(restaurants, cuisines, stars): # Do NOT modify this line at all!
    results = []
    for rest in restaurants:
        if check_cuisines(rest['cuisine'], cuisines) and rest['stars'] >= stars and rest['city'] == 'Singapore':
            results.append(rest)
    return results

"""# Code for testing your implementation of function `filter_list`."""

if __name__ == '__main__':  # Do not modify or remove this line!

    all_restaurants = get_michelin_restaurants()

    # Your restaurant is in Singapore and you want to know who else serves Cantonese and Sushi types of cuisine:
    similar_restaurants = filter_list(all_restaurants, ['Cantonese', 'Sushi'], 2)

    # Print the results:
    print("Number of 2-star (or better) restaurants in Singapore serving Cantonese or Sushi cuisine:", len(similar_restaurants), "  (expected answer: 1)")
    print("\nThis is the list produced by your code:")
    print_restaurants(similar_restaurants, ['name', 'cuisine', 'stars'])
    print("This is the expected list:")
    print_restaurants([{'name':'Shoukowa', 'cuisine': 'Sushi', 'stars': 2}], ['name', 'cuisine', 'stars'])